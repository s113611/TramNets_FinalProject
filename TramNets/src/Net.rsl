scheme NET =
class
  type
  	-- not sure if this is the right way to represent ?? 
    Net = StopId -m-> (Capacity >< Connection-list), -- tram nets
    Headway = Time, -- minimum headways
    DrivingTime = Time, -- minimum driving times
    Time = Nat, -- times in number of minutes
    Capacity = Nat, -- capacities
    StopId = Text,  -- names of stops
    Stop = (StopId >< Capacity), -- A stop
    ConnectionInformation = (Capacity >< DrivingTime >< Headway), -- basic connection information
    Connection = (Stop >< Stop >< ConnectionInformation)-list
  value /* generators */
    empty :  Net = [],  -- the empty net

    -- insert a stop with a given name and capacity 
    insertStop : StopId >< Capacity >< Net -> Net
    insertStop(SID, Cap, Net) is Net !! [ SID +> (Cap,<..>)]
	pre ~isIn(SID,Net),
	
    -- add a connection between given stops, 
    -- with the given capacity, minimum driving time and minimum headway
    addConnection : StopId >< StopId  >< Headway >< Capacity >< DrivingTime >< Net -> Net
    addConnection(SID, SID2,HWay,Cap,DTime,Net) is Net !! [SID +> Net(SID)]
    
  value /* observers */
    -- check whether a stop is in a network     
    isIn : StopId >< Net -> Bool
    isIn(SID,Net) is SID isin dom Net
 
    -- check whether two stops are directly connected in a network        
    --areDirectlyConnected : StopId >< StopId >< Net -> Bool
   -- ...,

    -- get minimum driving time between two connected stops        
   -- minHeadway : StopId >< StopId >< Net -~-> Headway
   -- ..., 

    -- get minimum driving time between two connected stops        
   -- minDrivingTime : StopId >< StopId >< Net -~-> DrivingTime
  --  ..., 

    -- get the capacity for a connection between two connected stops
  --  capacity : StopId >< StopId >< Net -~-> Capacity
 --   ...,
 
    -- get the capacity of a stop 
  --  capacity : StopId >< Net -~-> Capacity
  --  ...

 -- value /* predicates to check nets */
 --   isWellformed : Net -> Bool
 --   isWellformed(n) is ...
end  
