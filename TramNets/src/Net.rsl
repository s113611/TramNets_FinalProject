scheme NET =
class
  type
  	-- not sure if this is the right way to represent ?? 
    Net = StopId -m-> (Capacity >< Connection-set), -- tram nets
    Headway = Time, -- minimum headways
    DrivingTime = Time, -- minimum driving times
    Time = Nat, -- times in number of minutes
    Capacity = Nat, -- capacities
    StopId = Text,  -- names of stops
    Stop = (StopId >< Capacity), -- A stop
    ConnectionInformation = (Capacity >< DrivingTime >< Headway), -- basic connection information
    Connection = StopId >< StopId >< ConnectionInformation
    
  value /* generators */
    empty :  Net = [],  -- the empty net

    -- insert a stop with a given name and capacity 
    insertStop : StopId >< Capacity >< Net -> Net
    insertStop(SID, Cap, n) is n !! [ SID +> (Cap,{})],
	
    -- add a connection between given stops, 
    -- with the given capacity, minimum driving time and minimum headway
    addConnection : StopId >< StopId  >< Headway >< Capacity >< DrivingTime >< Net -> Net
    addConnection(SID, SID2,HWay,Cap,DTime,Net) is 
    	if(isIn(SID,Net) /\ isIn(SID2,Net)) then -- Make sure the stops have already exsited.
    		let
    			(capA,connectA) = Net(SID),
    			(capB,connectB) = Net(SID2)
    		in
    			let
    				newConnectA = connectA union {(SID,SID2,(Cap,DTime,HWay))},
    				newConnectB = connectB union {(SID,SID2,(Cap,DTime,HWay))}
    			in
    				Net !! [SID +> (capA,newConnectA)] !! [SID2 +> (capB,newConnectB)]
    			end
    		end
    	else Net end
    	
  value /* observers */
    -- check whether a stop is in a network     
    isIn : StopId >< Net -> Bool
    isIn(SID,Net) is SID isin dom Net,
 
    -- check whether two stops are directly connected in a network        
    areDirectlyConnected : StopId >< StopId >< Net -> Bool
   	areDirectlyConnected(SID,SID2,n) is 
   		let
   			(capA,connectA) = n(SID)
   		in
   			(exists (SID3,SID4,connectInfo): Connection :- (SID3,SID4,connectInfo) isin connectA /\ areEqual(SID,SID2,SID3,SID4))
   		end
   	pre isWellformed(n),
   	
   	-- support function
   	areEqual : StopId >< StopId >< StopId >< StopId -> Bool
   	areEqual(SID1,SID2,SID3,SID4) is SID1 = SID3 /\ SID2 = SID4 \/ SID1 = SID4 /\ SID2 = SID3,
   	
    -- get minimum head way between two connected stops        
   	minHeadway : StopId >< StopId >< Net -~-> Headway
    minHeadway(SID,SID2,n) is 
    	if(areDirectlyConnected(SID,SID2,n)) then
    		let
    			(capA,connectA) = n(SID),
    			(sid1,sid2,(Cap,DTime,HWay)) = getConnection(capA,connectA,SID,SID2)
    		in
    			HWay
    		end
    	else
    		0
    	end,

	-- is used to find a specfic connection
	getConnection : Capacity >< Connection-set >< StopId >< StopId -> Connection
	getConnection(cap,connectionSet,SID1,SID2) is
		let
			(sid1,sid2,(capacity,DTime,HWay)) = hd connectionSet
		in
			if (areEqual(sid1,sid2,SID1,SID2)) then
				(sid1,sid2,(capacity,DTime,HWay))
			else
				getConnection(cap,connectionSet \ {hd connectionSet},SID1,SID2)
			end
		end,
	
   -- get minimum driving time between two connected stops        
   minDrivingTime : StopId >< StopId >< Net -~-> DrivingTime
   minDrivingTime(SID,SID2,n) is
   		if(areDirectlyConnected(SID,SID2,n)) then
    		let
    			(capA,connectA) = n(SID),
    			(sid1,sid2,(Cap,DTime,HWay)) = getConnection(capA,connectA,SID,SID2)
    		in
    			DTime
    		end
    	else
    		0
    	end, 

    -- get the capacity for a connection between two connected stops
    connectedCapacity : StopId >< StopId >< Net -~-> Capacity
 	connectedCapacity(SID,SID2,n) is
 		if(areDirectlyConnected(SID,SID2,n)) then
    		let
    			(capA,connectA) = n(SID),
    			(sid1,sid2,(Cap,DTime,HWay)) = getConnection(capA,connectA,SID,SID2)
    		in
    			Cap
    		end
    	else
    		0
    	end,
 
    -- get the capacity of a stop 
 	capacity : StopId >< Net -~-> Capacity
  	capacity(SID,n) is 
  		let
  			(cap,connSet) = n(SID)
  		in
  			cap
  		end
  	pre isIn(SID,n)
  		
 value /* predicates to check nets */
   isWellformed : Net -> Bool
   isWellformed(n) is
   			-- we check that the map is not empty
   			n ~= [] /\ 
   			(all SID : StopId :- SID isin n => 
	   			(let  
	   				(capA,connectA) = n(SID)
	   			 in
	   				(all (sid1,sid2,connInfo) : Connection :- (sid1,sid2,connInfo) isin connectA => 
	   					-- There should not exists two connections in a connection-list where the stops are identical
	   					(all (sid3,sid4,connInfo2) : Connection :- (sid3,sid4,connInfo2) isin connectA /\
	   						 (sid3,sid4,connInfo2) ~= (sid1,sid2,connInfo) => ~areEqual(sid1,sid2,sid3,sid4)) 
	   					/\
	   				 	-- There should not exist a connection info where the capacity is 0
	   					(let 
	   						(Cap,DrivingT,Headw) = connInfo 
	   					in
	   						Cap ~= 0
	   					end)
	   				)
	   				--no stop should contain empty connection-list or have a capacity of 0 (defeats the purpose) 
	   				/\ (capA ~= 0 /\ connectA ~= {})		
	   			end)
   			)
end  
