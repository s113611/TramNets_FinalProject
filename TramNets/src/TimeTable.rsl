NET
scheme TIMETABLE = extend NET with
class
  type
    TimeTable = TramId -~m-> Plan, -- time tables
    Plan = (StopId >< Time >< Time)-list,
    TramId = Text -- tram names
    value /* generators */
      -- the empty timetable
      empty: TimeTable = [],

      -- add to a time table an empty plan for a new tram
      addTram: TramId >< TimeTable -> TimeTable
      addTram(trid,t) is t !! [trid +> <..>],

      -- add a stop with arrival time and departure time to the plan for a given tram
      addStop: TramId >< StopId >< Time >< Time >< TimeTable -> TimeTable
      addStop(trid,stid,time1,time2,t) is 
      		let 
    			pla = t(trid),--get current plan with tramId
    			addPl = pla ^ <.(stid,time1,time2).> -- add new stop to plan
    			--do we need to check the time??like compare the arrive time with existed plan
    		in
    			t !! [trid +> addPl] -- update the timetable
    		end
  value /* observers */
     -- check whether a tram with a given name exists in a given time table
     isIn : TramId >< TimeTable -> Bool
     isIn(tid,t) is tid isin dom t

     -- you can add more observers here
     -- ...
 
  value /* predicates to check time tables */   
      isWellformed : TimeTable >< Net -> Bool
      isWellformed(t, n) is 
      	(all trId : TramId :- trId isin dom t=>
      		let
      			plan = t(trId),
      			firstStop = hd plan,
      			secondStop = hd (tl plan),
      			(sid,arrTimeA,departTimeA) = firstStop,
      			(sid2,arrTimeB,departTimeB) = secondStop
      		in
      			(areDirectlyConnected(sid,sid2,n)) /\ (arrTimeB-departTimeA) > minDrivingTime(sid,sid2,n)
      		end)
end  
