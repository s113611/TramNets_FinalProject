NET
scheme TIMETABLE = extend NET with
class
  type
    TimeTable = TramId -~m-> Plan, -- time tables
    Plan = (StopId >< Time >< Time)-list,
    TramId = Text -- tram names
    value /* generators */
      -- the empty timetable
      empty: TimeTable = [],

      -- add to a time table an empty plan for a new tram
      addTram: TramId >< TimeTable -> TimeTable
      addTram(trid,t) is t !! [trid +> <..>],

      -- add a stop with arrival time and departure time to the plan for a given tram
      addStop: TramId >< StopId >< Time >< Time >< TimeTable -> TimeTable
      addStop(trid,stid,time1,time2,t) is 
      		let 
    			pla = t(trid),--get current plan with tramId
    			--lastStop = pla(len(pla)-1),--get the last stop of the plan
    			--(sid2,arrTime,departTime) = lastStop,
    			addPl = pla ^ <.(stid,time1,time2).> -- add new stop to plan
    			--do we need to check the time??like compare the arrive time with existed plan
    		in
    			t !! [trid +> addPl] -- update the timetable
    		end
  value /* observers */
     -- check whether a tram with a given name exists in a given time table
     isIn : TramId >< TimeTable -> Bool
     isIn(tid,t) is tid isin dom t,

     -- you can add more observers here
     isValidPlan: Plan >< Net-> Bool
     isValidPlan(plan,n) is 
     	let
     		firstStop = hd plan, -- get the first stop of the plan
      		secondStop = hd (tl plan),-- get the second stop of the plan
      		(sid,arrTimeA,departTimeA) = firstStop,
      		(sid2,arrTimeB,departTimeB) = secondStop
     	in
     		if(isIn(sid,n) /\ isIn(sid2,n)) then -- check do the stops in the Net
      				(areDirectlyConnected(sid,sid2,n))
      				--/\(arrTimeB-departTimeA) > minDrivingTime(sid,sid2,n)
      			else false end
     	end,
     getNewPlan: Plan >< Net-> Plan
     getNewPlan(p,n) is
     	let
     		newPlan = tl p
     	in
     		if(isValidPlan(p,n) /\ len(newPlan) ~= 0) then
     			newPlan
     		else p end
     	end
 
  value /* predicates to check time tables */   
  
  	  -- Do we need to check the capacity of each stop
      isWellformed : TimeTable >< Net -> Bool
      isWellformed(t, n) is 
      	(all trId : TramId :- trId isin dom t=>
      		let
      			plan = t(trId), -- get plan of the tram
      			--index =1,
      			--firstStop = plan(index), -- get the first stop of the plan
      			--secondStop = hd (tl plan),-- get the second stop of the plan
      			--(sid,arrTimeA,departTimeA) = firstStop,
      			--(sid2,arrTimeB,departTimeB) = secondStop,
      			newPlan = tl plan
      		in
      			if(len(plan) ~= 1) then
      				if(isValidPlan(plan,n)) then
      					isWellformed(t !! [trId +> newPlan],n) 
      				else false end
      			else true end
      		end)
end  
