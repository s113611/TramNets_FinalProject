TIMETABLE
scheme testTimeTable = 
extend TIMETABLE with
class
	value
		--net : Net = ["A" +> (2, {}), "B" +>(3, {("A","B",(3,10,2))}), "C" +>(2,{})],
		netValue: Net = [	"A" +> (2, {("A","B",(3,10,2))}), 
						 	"B" +> (3, {("A","B",(3,10,2)),("B","C",(3,12,4)),("B","D",(2,7,3))}), 
						 	"C" +> (2, {("B","C",(3,12,4))}),
						 	"D" +> (2, {("B","D",(2,7,3))})
						 	],
				
		vaplan: Plan = <.("A",0,1),("B",12,14),("C",28,32),("B",45,47).>,
		unvaplan2: Plan = <.("A",0,1),("B",12,14),("C",20,32),("D",45,47).>,
		vaplan3: Plan = <.("D",0,1),("B",12,14),("A",28,32).>,
		unVaplan: Plan = <.("A",0,1),("B",12,14),("C",28,32),("A",28,32).>,
		
		T1Plan: Plan = <.	("A",1,2),
							("B",13,15),
							("C",29,33).>,
		T2Plan: Plan = <.	("A",0,1),
							("B",12,14),
							("C",28,32),
							("B",46,48),
							("A",59,60)
							.>,
		T3Plan: Plan = <.	("A",2,4),
							("B",14,16),
							("C",30,34).>,
		T4Plan: Plan = <.	("A",3,5),
							("B",15,17),
							("C",31,35).>,
		T5Plan: Plan = <.	("D",0,2),
							("B",11,13),
							("A",28,32),
							("B",47,50),
							("D",58,60).>,
							
		wholePlanSetWrong: Plan-set = {T1Plan,T2Plan,T3Plan,T4Plan,T5Plan},	
		wholePlanSetRight : Plan-set = {T1Plan,T5Plan},
		
		TimeTableConnOverlap: 
					TimeTable = ["T1" +> T1Plan, 
								"T2" +> T2Plan,
								"T3" +> T3Plan,
								"T4" +> T4Plan],
		TimeTableHeadwayWrong:
					TimeTable = ["T1" +> T1Plan, 
								"T2" +> T2Plan,
								"T3" +> T3Plan],
		
		timeTable: TimeTable = ["tram1" +> <.	("A",0,1),
												("B",12,14),
												("C",28,32),
												("B",46,48),
												("A",59,60).>],
		wrtimeTable: TimeTable = ["tram1" +> <.	("A",0,1),
												("B",12,14),
												("C",28,32),
												("D",34,54).>],
		wholeTimeTable: TimeTable = ["tram1" +> <.	("A",0,1),
													("B",12,14),
													("C",28,32),
													("B",46,48),
													("A",59,60).>, 
									"tram2"+> <.	("D",0,2),
													("B",11,13), 
													("A",28,32),
													("B",47,50),
													("D",58,60).>],
		-- B stop has 4 trams at the same time
		wholeOverCapacityTimeTable: TimeTable = ["tram1" +> <.	("A",0,1),
													("B",12,14),
													("C",28,32),
													("B",46,48),
													("A",59,60).>, 
									"tram2"+> <.	("D",0,2),
													("B",11,13),
													("A",28,32),
													("B",47,50),
													("D",58,60).>,
									"tram3"+> <.	("D",0,2),
													("B",12,13),
													("A",28,32),
													("B",47,50),
													("D",58,60).>,
									"tram4"+> <.	("A",0,1),
													("B",12,14),
													("C",28,32),
													("B",46,48),
													("D",59,60).>,
									"tram6"+> <.	("A",0,4),
													("B",15,17),
													("C",29,31),
													("B",46,48),
													("D",59,60).>]
													
	test_case
		--[empty] empty,
		--check TimeTable	
		--[addTram]addTram("tram2",timeTable),
		--[addTram1]addTram("tram3",timeTable),
		--[addStop]addStop("tram1","B",46,48,timeTable),
		--[addStop1]addStop("tram1","D",46,48,timeTable),
		
		--check plan
		[isValidPlan]isValidPlan(unVaplan,netValue),
		[isValidPlan1]isValidPlan(vaplan,netValue),
		[isValidPlan2]isValidPlan(T5Plan,netValue),
		--[checkIsValidPlanForEachTram]checkIsValidPlanForEachTram(wholePlanSet,netValue),
		--[checkIsValidPlanForEachTram11]checkIsValidPlanForEachTram11(wrtimeTable,netValue),
		
		[checkIsAtSameStopAtSameTime]checkIsAtSameStopAtSameTime(12,12),
		[compareSubPlanTime]compareSubPlanTime(("B",11,14), {("B",12,14),("B",12,13),("B",45,53),("B",10,13)},0),	
		
		[compareOneSubWithOnePlan]compareOneSubWithOnePlan(("B",11,14), T2Plan),
	--	[compareOneSubWithAllPlans]compareOneSubWithAllPlans(("B",11,14),wholePlanSet,0),
		[compareOneSubWithTimeTable]compareOneSubWithTimeTable(("B",11,14),wholeTimeTable,0),
		
		[checkStopCapacity]checkStopCapacity(vaplan,wholeTimeTable,netValue),
		[checkStopCapacity1]checkStopCapacity(vaplan,wrtimeTable,netValue),
		
		[isWellformed]isWellformed(wrtimeTable,netValue),
		[isWellformed1]isWellformed(wholeOverCapacityTimeTable,netValue),
		[isWellformed2]isWellformed(wholeTimeTable,netValue),
		
		--[checkIsValidPlanForEachTram]checkIsValidPlanForEachTram(wholeTimeTable,netValue),
		
		[retrievePairCombination1] retrievePairCombination(T1Plan,<..>),
		[retrievePairCombination2] retrievePairCombination(T2Plan,<..>),
		
		
		-- compare a pair of stops, and checking if they overlap timewise (conn. capacity)
		[arePairConflictingR] arePairConflicting(
						 	(("A",0,1),("B",10,14)),
							(("A",1,2),("B",21,15)),netValue),
		[arePairConflictingW] arePairConflicting(
							(("A",0,1),("B",10,14)),
							(("A",1,2),("B",20,21)),netValue),
							
		-- compare a pair with another plan (conn. capacity) returns false if they dont conflict
		[comparePairWithOnePlanR] comparePairWithOnePlan((("A",0,1 ),("B",10,14)),T5Plan,netValue),
		[comparePairWithOnePlanW] comparePairWithOnePlan((("A",0,1 ),("B",10,14)),T2Plan,netValue),
		
		-- compare a pair with all other plans (returns a counter)
		[comparePairWithAllOtherPlansR] comparePairWithAllOtherPlans((("A",0,1 ),("B",10,14)),
							T1Plan,wholePlanSetRight,netValue,0),
		[comparePairWithAllOtherPlansW] comparePairWithAllOtherPlans((("A",0,1 ),("B",10,14)),
							T1Plan,wholePlanSetWrong,netValue,0),							
		
		-- compare two pairs of stops if they are overlapping headway					
		[arePairConflictingHeadwayR] arePairConflictingHeadway(
							(("A",0,1),("B",10,14)),
							(("A",1,4),("B",20,21)),netValue),
		[arePairConflictingHeadwayW] arePairConflictingHeadway(
							(("A",0,1),("B",10,14)),
							(("A",3,4),("B",12,17)),netValue),
							
		-- compare entire plan with a pair to check if they are overlapping headway				
		[comparePairWithOnePlanHeadwayR] comparePairWithOnePlanHeadway((("A",0,1 ),("B",10,14)),T2Plan,netValue),
		[comparePairWithOnePlanHeadwayW] comparePairWithOnePlanHeadway((("A",0,1 ),("B",10,14)),T5Plan,netValue),
		
		-- compare a pair with all other plans 
		[comparePairWithAllOtherPlansHeadWayR] comparePairWithAllOtherPlansHeadWay((("A",0,1 ),("B",10,14)),
							T1Plan,wholePlanSetRight,netValue),
		[comparePairWithAllOtherPlansHeadWayW] comparePairWithAllOtherPlansHeadWay((("A",0,1 ),("B",10,14)),
							T1Plan,wholePlanSetWrong,netValue),
		-- checking detection overflow, that is : both conn. capacity and headway
		[detectConnectionOverflowOK] detectConnectionOverflow(wholeTimeTable,netValue),
		[detectConnectionOverflowHeadway] detectConnectionOverflow(TimeTableHeadwayWrong,netValue),
		[detectConnectionOverflowConnOverlap] detectConnectionOverflow(TimeTableConnOverlap,netValue)
		
		
end
