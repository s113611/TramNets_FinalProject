TIMETABLE
scheme testTimeTable = 
extend TIMETABLE with
class
	value
		--net : Net = ["A" +> (2, {}), "B" +>(3, {("A","B",(3,10,2))}), "C" +>(2,{})],
		netValue: Net = [	"A" +> (2, {("A","B",(3,10,2))}), 
						 	"B" +> (3, {("A","B",(3,10,2)),("B","C",(3,12,4)),("B","D",(2,7,3))}), 
						 	"C" +> (2, {("B","C",(3,12,4))}),
						 	"D" +> (2, {("B","D",(2,7,3))})
						 	],
		
		T1Plan: Plan = <.	("A",1,2),
							("B",13,15),
							("C",29,33).>,
		T2Plan: Plan = <.	("A",0,1),
							("B",12,14),
							("C",28,32),
							("B",46,48),
							("A",59,60)
							.>,
		T3Plan: Plan = <.	("A",2,4),
							("B",14,16),
							("C",30,34).>,
		T4Plan: Plan = <.	("A",3,5),
							("B",15,17),
							("C",31,35).>,
		T5Plan: Plan = <.	("D",0,2),
							("B",11,13),
							("A",28,32),
							("B",47,50),
							("D",58,60).>,
		-- InValid plan because of driving time less than requirement
		T6PlanInValid: Plan = <.("D",0,2),
							("B",14,17),
							("A",25,28),
							("B",40,42),
							("D",53,60).>,
		T7Plan: Plan = <.	("D",0,2),
							("B",12,13),
							("C",28,32),
							("B",47,50),
							("D",58,60).>,
		T8Plan: Plan = <.	("D",0,2),
							("B",11,14),
							("D",28,32),
							("B",47,50),
							("D",58,60).>,
							
		wholePlanSetWrong: Plan-set = {T1Plan,T2Plan,T3Plan,T4Plan,T5Plan},	
		wholePlanSetRight : Plan-set = {T1Plan,T5Plan},
		InvalidPlanSet : Plan-set = {T1Plan,T6PlanInValid},
		
		TimeTableConnOverlap: 
					TimeTable = ["T1" +> T1Plan, 
								"T2" +> T2Plan,
								"T3" +> T3Plan,
								"T4" +> T4Plan],
		TimeTableHeadwayWrong:
					TimeTable = ["T1" +> T1Plan, 
								"T2" +> T2Plan,
								"T3" +> T3Plan],
		
		TimeTableRightExample: TimeTable = ["T2" +> T1Plan, 
											"T5" +> T5Plan],
											
		TimeTableInValidExample: 
					TimeTable = ["T1" +> T1Plan, 
								"T2" +> T2Plan,
								"T6" +> T6PlanInValid],
	    										
		TimeTableStopOverloadExample:
					 TimeTable = ["T1" +> T1Plan, 
								"T2" +> T2Plan,
								"T3" +> T3Plan,
								"T5" +> T5Plan,
								"T7" +> T7Plan,
								"T8" +> T8Plan]
													
	test_case
	
	    -----------------------------Test Cases for Generator functions ------------------------------
		-- Add a exist tram to empty the whole timetable of this tram
		[addExsitTram]addTram("T2",TimeTableRightExample),
		
		-- Add a new tram with an empty plan
		[addNewTram]addTram("T4",TimeTableRightExample),
		
		-- Add a stop to a plan
		[addStop]addStop("T1","B",46,48,TimeTableRightExample),
		
		 -----------------------------Test Cases for Observer functions ------------------------------
		
		--Check is the plan valid
		[ValidPlan]isValidPlan(T1Plan,netValue),
		[InValidPlan]isValidPlan(T6PlanInValid,netValue),
		
		--Check does the tram exist in timetable
		[isInTimeTable]isIn("T2",TimeTableRightExample),
		[isNotInTimetable]isIn("T7",TimeTableRightExample),
		
		------------------Test Cases for checking valid plan in whole time table ---------------------
		
		-- Check is valid plan set
		[checkValidPlanSet]checkIsValidPlanSet(wholePlanSetRight,netValue),
		[checkInValidPlanSet]checkIsValidPlanSet(InvalidPlanSet,netValue),
		
		-- Check are all the plans in time table valid 
		[ValidPlanForWholeTimeTable]checkIsValidPlanForWholeTimeTable(TimeTableRightExample,netValue),
		[InValidPlanForWholeTimeTable]checkIsValidPlanForWholeTimeTable(TimeTableInValidExample,netValue),
		
		------------------Test Cases for checking stop capacity ---------------------
		-- Check do the trams stop at the same stop at same time
		[checkIsAtSameStopAtSameTime]checkIsAtSameStopAtSameTime(11,17,20,18),
		[checkIsNOTAtSameStopAtSameTime]checkIsAtSameStopAtSameTime(11,17,15,18),
		
		--Get the same stop from other plan
		[getSameStopsFromOnePlan]getSameStopsFromOnePlan("B",T2Plan),
		
		--Compare time of one stop with all the other same stops to find the same stop count at same time
		[compareSubPlanTime]compareSubPlanTime(("B",11,14), {("B",12,14),("B",12,13),("B",45,53),("B",10,13)},0),
		
		--Compare one subplan with a plan to find out the same stop at same time
		[compareOneSubWithOnePlan]compareOneSubWithOnePlan(("B",11,14), T2Plan),	
		
		--Compare one subplan with a plan-set to find out the same stop at same time
		[compareOneSubWithAllPlans]compareOneSubWithAllPlans(("B",11,14),wholePlanSetRight,0),
		
		--Compare one subplan with the whole timetable to find out the same stop at same time
		[compareOneSubWithTimeTable]compareOneSubWithTimeTable(("B",11,14),TimeTableRightExample,0),
		
		--Check the stop capacity with the whole timetable
		[checkStopCapacity]checkStopCapacity(T2Plan,TimeTableRightExample,netValue),
		[checkOverloadStopCapacity]checkStopCapacity(T2Plan,TimeTableStopOverloadExample,netValue),
		
		------------------Test Cases for checking connection capacity and headway ---------------------
		-- 
		[retrievePairCombination1] retrievePairCombination(T1Plan,<..>),
		[retrievePairCombination2] retrievePairCombination(T2Plan,<..>),
		
		-- compare a pair of stops, and checking if they overlap timewise (conn. capacity)
		[arePairConflictingR] arePairConflicting(
						 	(("A",0,1),("B",10,14)),
							(("A",1,2),("B",21,15)),netValue),
		[arePairConflictingW] arePairConflicting(
							(("A",0,1),("B",10,14)),
							(("A",1,2),("B",20,21)),netValue),
							
		-- compare a pair with another plan (conn. capacity) returns false if they dont conflict
		[comparePairWithOnePlanR] comparePairWithOnePlan((("A",0,1 ),("B",10,14)),T5Plan,netValue),
		[comparePairWithOnePlanW] comparePairWithOnePlan((("A",0,1 ),("B",10,14)),T2Plan,netValue),
		
		-- compare a pair with all other plans (returns a counter)
		[comparePairWithAllOtherPlansR] comparePairWithAllOtherPlans((("A",0,1 ),("B",10,14)),
							T1Plan,wholePlanSetRight,netValue,0),
		[comparePairWithAllOtherPlansW] comparePairWithAllOtherPlans((("A",0,1 ),("B",10,14)),
							T1Plan,wholePlanSetWrong,netValue,0),							
		
		-- compare two pairs of stops if they are overlapping headway					
		[arePairConflictingHeadwayR] arePairConflictingHeadway(
							(("A",0,1),("B",10,14)),
							(("A",1,4),("B",20,21)),netValue),
		[arePairConflictingHeadwayW] arePairConflictingHeadway(
							(("A",0,1),("B",10,14)),
							(("A",3,4),("B",12,17)),netValue),
							
		-- compare entire plan with a pair to check if they are overlapping headway				
		[comparePairWithOnePlanHeadwayR] comparePairWithOnePlanHeadway((("A",0,1 ),("B",10,14)),T2Plan,netValue),
		[comparePairWithOnePlanHeadwayW] comparePairWithOnePlanHeadway((("A",0,1 ),("B",10,14)),T5Plan,netValue),
		
		-- compare a pair with all other plans 
		[comparePairWithAllOtherPlansHeadWayR] comparePairWithAllOtherPlansHeadWay((("A",0,1 ),("B",10,14)),
							T1Plan,wholePlanSetRight,netValue),
		[comparePairWithAllOtherPlansHeadWayW] comparePairWithAllOtherPlansHeadWay((("A",0,1 ),("B",10,14)),
							T1Plan,wholePlanSetWrong,netValue),
		-- checking detection overflow, that is : both conn. capacity and headway
		--[detectConnectionOverflowOK] detectConnectionOverflow(wholeTimeTable,netValue),
		[detectConnectionOverflowHeadway] detectConnectionOverflow(TimeTableHeadwayWrong,netValue),
		[detectConnectionOverflowConnOverlap] detectConnectionOverflow(TimeTableConnOverlap,netValue),
		
		------------------Test Cases for isWellformed ---------------------
				
		[isWellformed]isWellformed(TimeTableRightExample,netValue),
		[isWellformedWrongStopCapacity]isWellformed(TimeTableStopOverloadExample,netValue),
		[isWellformedWrongHeadway]isWellformed(TimeTableHeadwayWrong,netValue),
		[isWellformedWrongConnCapacity]isWellformed(TimeTableConnOverlap,netValue)
		
		
end
