NET

scheme testNet = 
extend NET with
class
	value
		net : Net = ["A" +> (2, {}), "B" +>(3, {})],
		netValue: Net = [	"A" +> (2, {("A","B",(3,10,2))}), 
						 	"B" +> (3, {("A","B",(3,10,2)),("B","C",(3,12,4)),("B","D",(2,7,3))}), 
						 	"C" +> (2, {("B","C",(3,12,4))}),
						 	"D" +> (2, {("B","D",(2,7,3))})
						 	],
		netValueNotWF: Net = ["A" +> (2, {("A","B",(3,10,2)),("A","B",(2,10,2))}), "B" +>(3, {("A","B",(3,10,2)),("B","C",(3,12,4))}), "C" +> (2, {("B","C",(3,12,4))})]
	test_case
		--[empty] empty,
		[insertStop] insertStop("A",2,net),
		[insertStopB] insertStop("B",3,net),
		[isWellformed] isWellformed(netValue),
		[addConnection] addConnection("A","B",2,3,10,net),
		
		[areEqual]areEqual("A","B","B","A"),
		[areEqual1]areEqual("A","B","A","B"),
		
		--check are directly connect
		[areDirectlyConnected]areDirectlyConnected("D","B",netValue),
		[areDirectlyConnected1]areDirectlyConnected("B","A",netValue),
		[areDirectlyConnected2]areDirectlyConnected("A","C",netValue),

		[netValueNotWF] isWellformed(netValueNotWF),
		
		[minHeadway]minHeadway("A","B",netValue),
		[minHeadway1]minHeadway("B","D",netValue),
		
		[minDrivingTime]minDrivingTime("A","B",netValue),
		[minDrivingTime1]minDrivingTime("B","D",netValue),
		[minDrivingTime2]minDrivingTime("C","B",netValue),
		
		[capacity]capacity("A",netValue)
end